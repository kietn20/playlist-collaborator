# File: src/main/resources/application.properties
# Purpose: Configuration settings for the Spring Boot application.
# Location: src/main/resources/

# --- Database Configuration ---
# Datasource URL: Connects to the PostgreSQL container running on localhost:5432, database 'playlist_db'
# spring.datasource.url=jdbc:postgresql://localhost:5432/playlist_db
spring.datasource.url=jdbc:postgresql://postgres-db:5432/playlist_db


# Datasource Credentials: Use the user/password defined in docker-compose.yml
spring.datasource.username=playlist_user
spring.datasource.password=playlist_password

# Specify the PostgreSQL driver (often auto-detected, but good practice)
spring.datasource.driver-class-name=org.postgresql.Driver

# --- JPA/Hibernate Configuration ---
# Show SQL statements generated by Hibernate in the logs (useful for debugging)
spring.jpa.show-sql=true

# Hibernate dialect for PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Hibernate DDL (Data Definition Language) Auto generation
# 'update': Hibernate checks the DB schema and makes changes (adds tables/columns) on startup if needed.
#           Suitable for development. Use 'validate' or migration tools (Flyway/Liquibase) for production.
# 'create-drop': Creates schema on startup, drops on shutdown (useful for tests, data lost every time).
# 'create': Creates schema, leaves it (data persists between restarts).
# 'none': Disable automatic DDL generation.
spring.jpa.hibernate.ddl-auto=update

# --- WebSocket Configuration (Placeholder - we'll use this later) ---
# Example setting (we'll add real config later):
# spring.websocket.stomp.endpoint=/ws

# --- Server Port ---
server.port=8080

# -- fixing CORS error --
logging.level.org.springframework.security=DEBUG
# You can also enable general web logging for more context
# logging.level.org.springframework.web=DEBUG