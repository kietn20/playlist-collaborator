# File: .github/workflows/build-and-push-docker-images.yml
# Purpose: CI/CD workflow to build, test, and push Docker images for frontend and backend.
# Location: Root of the repository in .github/workflows/

name: Build, Test, and Push Docker Images

# When this action will run.
on:
  # Run on pushes to the main branch
  push:
    branches: ["main"]
  # Also allow running this workflow manually from the Actions tab on GitHub
  workflow_dispatch:

jobs:
  # --- Backend Job ---
  build-and-test-backend:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub

    steps:
      # Step 1: Check out the repository's code so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin" # Use Eclipse Temurin, consistent with Dockerfile

      # Step 3: Cache Maven dependencies to speed up future builds
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run backend tests with Maven
      # Note: This will need a database. For unit tests, H2 in-memory DB is common.
      # For integration tests, this step could spin up a DB service.
      # For now, we will focus on unit tests which don't need a DB.
      - name: Test backend with Maven
        run: ./mvnw -B test
        working-directory: ./backend

      # Step 5: Log in to Docker Hub
      # Use the secrets we configured in the GitHub repository settings
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Set up Docker Buildx (required for some advanced build features)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 7: Build and push backend Docker image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend # Path to the backend directory
          file: ./backend/Dockerfile # Path to the backend Dockerfile
          push: true # Actually push the image to the registry
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/playlist-backend:latest # Tag format: user/repo:tag

  # --- Frontend Job ---
  build-and-test-frontend:
    runs-on: ubuntu-latest # Run this job on a separate runner in parallel

    steps:
      # Step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm" # Use built-in npm caching
          cache-dependency-path: frontend/package-lock.json

      # Step 3: Install frontend dependencies
      - name: Install dependencies
        run: npm ci # 'npm ci' is recommended for CI as it uses package-lock.json for exact installs
        working-directory: ./frontend

      # Step 4: Run frontend tests
      - name: Test frontend
        run: npm test -- --run # The -- --run part tells vitest to run once and exit
        working-directory: ./frontend

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 7: Build and push frontend Docker image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/playlist-frontend:latest
