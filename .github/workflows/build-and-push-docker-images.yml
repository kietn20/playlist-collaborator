# Purpose: CI/CD workflow to build, test, and push Docker images for frontend and backend.

name: Build, Test, and Push Docker Images

# When this action will run.
on:
  # Run on pushes to the main branch
  push:
    branches: ["main"]
  # Also allow running this workflow manually from the Actions tab on GitHub
  workflow_dispatch:

jobs:
  # --- Backend Job ---
  build-and-test-backend:
    runs-on: ubuntu-latest

    # This 'services' block runs a Docker container alongside the job runner.
    # It will be available on 'localhost' to the steps in this job.
    services:
      # We'll name the service 'postgres'
      postgres:
        # Use a postgres Docker image. '15' matches your docker-compose.
        image: postgres:15
        # Environment variables to initialize the PostgreSQL container
        env:
          POSTGRES_DB: playlist_test_db  # Use a separate test database name
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        # Ports are not strictly needed to be mapped to the host runner,
        # but can be useful for debugging. The job itself will connect via localhost.
        # GitHub Actions ensures port 5432 on the service container is available to
        # the main job container on localhost:5432.
        ports:
          - 5432:5432
        # Health check to ensure PostgreSQL is ready to accept connections before tests run
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Check out the repository's code so the job can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin" # Use Eclipse Temurin, consistent with Dockerfile

      # Step 3: Cache Maven dependencies to speed up future builds
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run backend tests with Maven
      # This step is where we tell Spring Boot to use the test database
      - name: Test backend with Maven using Test DB
        run: ./mvnw -B test
        working-directory: ./backend
        env:
          # These environment variables will be available to the Spring Boot test context.
          # They override the values in application.properties.
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/playlist_test_db
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          # We might also want to set ddl-auto to create-drop for clean tests
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}

      # Step 5: Log in to Docker Hub
      # Use the secrets we configured in the GitHub repository settings
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Set up Docker Buildx (required for some advanced build features)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 7: Build and push backend Docker image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend # Path to the backend directory
          file: ./backend/Dockerfile # Path to the backend Dockerfile
          push: true # Actually push the image to the registry
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/playlist-backend:latest # Tag format: user/repo:tag

  # --- Frontend Job ---
  build-and-test-frontend:
    runs-on: ubuntu-latest # Run this job on a separate runner in parallel

    steps:
      # Step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm" # Use built-in npm caching
          cache-dependency-path: frontend/package-lock.json

      # Step 3: Install frontend dependencies
      - name: Install dependencies
        run: npm ci # 'npm ci' is recommended for CI as it uses package-lock.json for exact installs
        working-directory: ./frontend

      # Step 4: Run frontend tests
      - name: Test frontend
        run: npm test -- --run # The -- --run part tells vitest to run once and exit
        working-directory: ./frontend

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 7: Build and push frontend Docker image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/playlist-frontend:latest
  deploy:
      runs-on: ubuntu-latest
      needs: [build-and-test-backend, build-and-test-frontend]

      steps:
        # Step 1: Install the SSH Key from GitHub Secrets
        - name: Install SSH Key
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
            # The known_hosts value is required to prevent interactive prompts when connecting
            # for the first time. The value here is a basic pattern matching any host,
            # which is acceptable for this setup but can be made more secure.
            known_hosts: 'just-a-placeholder-for-this-action'

        # Step 2: SSH into the EC2 instance and run deployment commands
        - name: Deploy to EC2
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USERNAME }}
            key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
            script: |
              # Navigate to the app directory
              cd ~/playlist-app

              # Ensure the local repository is up-to-date with the latest changes (e.g., new docker-compose.prod.yml)
              git pull origin main

              # Log in to Docker Hub using credentials passed as environment variables from secrets
              echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

              # Pull the latest images from Docker Hub that were just pushed by the build jobs
              docker compose -f docker-compose.prod.yml pull

              # Stop and restart the services using the newly pulled images
              docker compose -f docker-compose.prod.yml up -d

              # Clean up any old, unused Docker images to save space
              docker image prune -af